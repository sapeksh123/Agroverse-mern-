{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sapek\\\\Downloads\\\\agroverse\\\\client\\\\src\\\\components\\\\Chatbot\\\\Chatbot.jsx\",\n  _s = $RefreshSig$();\n// // src/components/Chatbot.jsx\n// import React, { useState } from 'react'\n// import { IoSend } from 'react-icons/io5'\n// import { GoogleGenerativeAI } from '@google/generative-ai'\n\n// const Chatbot = () => {\n//   const [message, setMessage] = useState(\"\")\n//   const [messages, setMessages] = useState([])\n//   const [isResponseScreen, setIsResponseScreen] = useState(false)\n\n//   const generateResponse = async (msg) => {\n//     if (!msg) return\n\n//     const genAI = new GoogleGenerativeAI(import.meta.env.VITE_GEMINI_API_KEY)\n//     const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" })\n\n//     const result = await model.generateContent(msg)\n//     const text = result.response.text()\n\n//     setMessages([\n//       ...messages,\n//       { type: \"user\", text: msg },\n//       { type: \"bot\", text: text }\n//     ])\n//     setIsResponseScreen(true)\n//     setMessage(\"\")\n//   }\n\n//   const handleSend = () => {\n//     if (message.trim() === \"\") return alert(\"You must write something!\")\n//     generateResponse(message)\n//   }\n\n//   const newChat = () => {\n//     setMessages([])\n//     setIsResponseScreen(false)\n//   }\n\n//   return (\n//     <div className=\"w-screen min-h-screen bg-[#0E0E0E] text-white flex flex-col items-center\">\n//       <div className=\"w-full px-10 py-5 flex justify-between items-center border-b border-gray-700\">\n//         <h1 className=\"text-2xl font-bold\">AssistMe</h1>\n//         {isResponseScreen && (\n//           <button onClick={newChat} className=\"bg-gray-800 px-4 py-2 rounded-full text-sm hover:bg-gray-700 transition\">\n//             New Chat\n//           </button>\n//         )}\n//       </div>\n\n//       <div className=\"flex-1 w-full px-10 py-4 overflow-y-auto\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className={`my-3 ${msg.type === \"user\" ? \"text-right\" : \"text-left\"}`}>\n//             <div className={`inline-block px-4 py-2 rounded-lg ${msg.type === \"user\" ? \"bg-blue-600\" : \"bg-gray-700\"}`}>\n//               {msg.text}\n//             </div>\n//           </div>\n//         ))}\n//         {!isResponseScreen && (\n//           <div className=\"text-center mt-20\">\n//             <p className=\"text-lg text-gray-400\">Start chatting with AssistMe ðŸš€</p>\n//           </div>\n//         )}\n//       </div>\n\n//       <div className=\"w-full px-10 py-4 border-t border-gray-700\">\n//         <div className=\"flex items-center bg-[#181818] rounded-full px-4\">\n//           <input\n//             value={message}\n//             onChange={(e) => setMessage(e.target.value)}\n//             className=\"flex-1 bg-transparent p-3 text-white outline-none\"\n//             placeholder=\"Write your message here...\"\n//           />\n//           <button onClick={handleSend} className=\"text-green-500 text-2xl\">\n//             <IoSend />\n//           </button>\n//         </div>\n//         <p className=\"text-center text-gray-500 text-xs mt-3\">AssistMe uses Gemini AI by Google.</p>\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default Chatbot\n\n// src/components/Chatbot.jsx\n// import React, { useState } from \"react\";\n// import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// const Chatbot = ({ theme }) => {\n//   const [message, setMessage] = useState(\"\");\n//   const [messages, setMessages] = useState([]);\n//   const [loading, setLoading] = useState(false);\n\n//   const genAI = new GoogleGenerativeAI(import.meta.env.VITE_GEMINI_API_KEY);\n//   const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n//   const generateResponse = async (msg) => {\n//     if (!msg.trim()) return;\n//     setLoading(true);\n//     setMessages([...messages, { type: \"user\", text: msg }]);\n//     setMessage(\"\");\n\n//     try {\n//       const result = await model.generateContent(msg);\n//       const response = await result.response.text();\n//       setMessages((prev) => [...prev, { type: \"bot\", text: response }]);\n//     } catch (err) {\n//       console.error(err);\n//       setMessages((prev) => [...prev, { type: \"bot\", text: \"Error generating response.\" }]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className={`p-4 min-h-screen transition duration-500 ${theme === 'dark' ? 'bg-green-950 text-white' : 'bg-green-100 text-black'}`}>\n//       <h1 className=\"text-3xl font-bold text-center mb-6\">FarmBot AI ðŸŒ¾</h1>\n//       <div className=\"max-w-3xl mx-auto bg-white/10 rounded-lg p-4 space-y-4 shadow-lg\">\n//         <div className=\"space-y-3 overflow-y-auto max-h-[60vh] scrollbar-thin scrollbar-thumb-green-400\">\n//           {messages.map((msg, i) => (\n//             <div\n//               key={i}\n//               className={`p-3 rounded-xl w-fit ${\n//                 msg.type === \"user\" ? \"bg-green-700 text-white self-end ml-auto\" : \"bg-green-300 text-black\"\n//               }`}\n//             >\n//               {msg.text}\n//             </div>\n//           ))}\n//           {loading && (\n//             <div className=\"animate-pulse text-sm text-green-500\">FarmBot is thinking...</div>\n//           )}\n//         </div>\n\n//         <div className=\"flex gap-2 mt-4\">\n//           <input\n//             value={message}\n//             onChange={(e) => setMessage(e.target.value)}\n//             type=\"text\"\n//             placeholder=\"Ask me about farming tips...\"\n//             className=\"flex-1 px-4 py-2 rounded-full border border-green-400 outline-none\"\n//             onKeyDown={(e) => e.key === \"Enter\" && generateResponse(message)}\n//           />\n//           <button\n//             onClick={() => generateResponse(message)}\n//             className=\"bg-green-600 text-white px-4 py-2 rounded-full hover:bg-green-700\"\n//           >\n//             Send\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chatbot;\n\nimport React, { useState } from \"react\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport TypingAnimation from \"./TypingAnimation\"; // Import the TypingAnimation component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = ({\n  theme\n}) => {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY);\n  const model = genAI.getGenerativeModel({\n    model: \"gemini-1.5-flash\"\n  });\n  const generateResponse = async msg => {\n    if (!msg.trim()) return;\n    setLoading(true);\n    setMessages([...messages, {\n      type: \"user\",\n      text: msg\n    }]);\n    setMessage(\"\");\n    try {\n      const result = await model.generateContent(msg);\n      const response = await result.response.text();\n      setMessages(prev => [...prev, {\n        type: \"bot\",\n        text: response\n      }]);\n    } catch (err) {\n      console.error(err);\n      setMessages(prev => [...prev, {\n        type: \"bot\",\n        text: \"Error generating response.\"\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `p-4 min-h-screen transition duration-500 ${theme === 'dark' ? 'bg-green-950 text-white' : 'bg-green-100 text-black'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold text-center mb-6\",\n      children: \"AgroBot AI \\uD83C\\uDF3E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-3xl mx-auto bg-white/10 rounded-lg p-4 space-y-4 shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-3 overflow-y-auto max-h-[60vh] scrollbar-thin scrollbar-thumb-green-400\",\n        children: [messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `p-3 rounded-xl w-fit ${msg.type === \"user\" ? \"bg-green-700 text-white self-end ml-auto\" : \"bg-green-300 text-black\"}`,\n          children: msg.text\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this)), loading && /*#__PURE__*/_jsxDEV(TypingAnimation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this) // Show the typing animation when loading\n        ]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-2 mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          type: \"text\",\n          placeholder: \"Ask me about farming tips...\",\n          className: \"flex-1 px-4 py-2 rounded-full border border-green-400 outline-none relative pl-2 typing-effect\" // Add the typing-effect class here\n          ,\n          onKeyDown: e => e.key === \"Enter\" && generateResponse(message)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => generateResponse(message),\n          className: \"bg-green-600 text-white px-4 py-2 rounded-full hover:bg-green-700\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"ZJeCqnkzTd4v6xjBUwVWs4zc6ww=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","GoogleGenerativeAI","TypingAnimation","jsxDEV","_jsxDEV","Chatbot","theme","_s","message","setMessage","messages","setMessages","loading","setLoading","genAI","process","env","REACT_APP_GEMINI_API_KEY","model","getGenerativeModel","generateResponse","msg","trim","type","text","result","generateContent","response","prev","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","i","value","onChange","e","target","placeholder","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["C:/Users/sapek/Downloads/agroverse/client/src/components/Chatbot/Chatbot.jsx"],"sourcesContent":["// // src/components/Chatbot.jsx\r\n// import React, { useState } from 'react'\r\n// import { IoSend } from 'react-icons/io5'\r\n// import { GoogleGenerativeAI } from '@google/generative-ai'\r\n\r\n// const Chatbot = () => {\r\n//   const [message, setMessage] = useState(\"\")\r\n//   const [messages, setMessages] = useState([])\r\n//   const [isResponseScreen, setIsResponseScreen] = useState(false)\r\n\r\n//   const generateResponse = async (msg) => {\r\n//     if (!msg) return\r\n\r\n//     const genAI = new GoogleGenerativeAI(import.meta.env.VITE_GEMINI_API_KEY)\r\n//     const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" })\r\n\r\n//     const result = await model.generateContent(msg)\r\n//     const text = result.response.text()\r\n\r\n//     setMessages([\r\n//       ...messages,\r\n//       { type: \"user\", text: msg },\r\n//       { type: \"bot\", text: text }\r\n//     ])\r\n//     setIsResponseScreen(true)\r\n//     setMessage(\"\")\r\n//   }\r\n\r\n//   const handleSend = () => {\r\n//     if (message.trim() === \"\") return alert(\"You must write something!\")\r\n//     generateResponse(message)\r\n//   }\r\n\r\n//   const newChat = () => {\r\n//     setMessages([])\r\n//     setIsResponseScreen(false)\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"w-screen min-h-screen bg-[#0E0E0E] text-white flex flex-col items-center\">\r\n//       <div className=\"w-full px-10 py-5 flex justify-between items-center border-b border-gray-700\">\r\n//         <h1 className=\"text-2xl font-bold\">AssistMe</h1>\r\n//         {isResponseScreen && (\r\n//           <button onClick={newChat} className=\"bg-gray-800 px-4 py-2 rounded-full text-sm hover:bg-gray-700 transition\">\r\n//             New Chat\r\n//           </button>\r\n//         )}\r\n//       </div>\r\n\r\n//       <div className=\"flex-1 w-full px-10 py-4 overflow-y-auto\">\r\n//         {messages.map((msg, index) => (\r\n//           <div key={index} className={`my-3 ${msg.type === \"user\" ? \"text-right\" : \"text-left\"}`}>\r\n//             <div className={`inline-block px-4 py-2 rounded-lg ${msg.type === \"user\" ? \"bg-blue-600\" : \"bg-gray-700\"}`}>\r\n//               {msg.text}\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//         {!isResponseScreen && (\r\n//           <div className=\"text-center mt-20\">\r\n//             <p className=\"text-lg text-gray-400\">Start chatting with AssistMe ðŸš€</p>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n\r\n//       <div className=\"w-full px-10 py-4 border-t border-gray-700\">\r\n//         <div className=\"flex items-center bg-[#181818] rounded-full px-4\">\r\n//           <input\r\n//             value={message}\r\n//             onChange={(e) => setMessage(e.target.value)}\r\n//             className=\"flex-1 bg-transparent p-3 text-white outline-none\"\r\n//             placeholder=\"Write your message here...\"\r\n//           />\r\n//           <button onClick={handleSend} className=\"text-green-500 text-2xl\">\r\n//             <IoSend />\r\n//           </button>\r\n//         </div>\r\n//         <p className=\"text-center text-gray-500 text-xs mt-3\">AssistMe uses Gemini AI by Google.</p>\r\n//       </div>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// export default Chatbot\r\n\r\n// src/components/Chatbot.jsx\r\n// import React, { useState } from \"react\";\r\n// import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\n// const Chatbot = ({ theme }) => {\r\n//   const [message, setMessage] = useState(\"\");\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n//   const genAI = new GoogleGenerativeAI(import.meta.env.VITE_GEMINI_API_KEY);\r\n//   const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\r\n\r\n//   const generateResponse = async (msg) => {\r\n//     if (!msg.trim()) return;\r\n//     setLoading(true);\r\n//     setMessages([...messages, { type: \"user\", text: msg }]);\r\n//     setMessage(\"\");\r\n\r\n//     try {\r\n//       const result = await model.generateContent(msg);\r\n//       const response = await result.response.text();\r\n//       setMessages((prev) => [...prev, { type: \"bot\", text: response }]);\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       setMessages((prev) => [...prev, { type: \"bot\", text: \"Error generating response.\" }]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className={`p-4 min-h-screen transition duration-500 ${theme === 'dark' ? 'bg-green-950 text-white' : 'bg-green-100 text-black'}`}>\r\n//       <h1 className=\"text-3xl font-bold text-center mb-6\">FarmBot AI ðŸŒ¾</h1>\r\n//       <div className=\"max-w-3xl mx-auto bg-white/10 rounded-lg p-4 space-y-4 shadow-lg\">\r\n//         <div className=\"space-y-3 overflow-y-auto max-h-[60vh] scrollbar-thin scrollbar-thumb-green-400\">\r\n//           {messages.map((msg, i) => (\r\n//             <div\r\n//               key={i}\r\n//               className={`p-3 rounded-xl w-fit ${\r\n//                 msg.type === \"user\" ? \"bg-green-700 text-white self-end ml-auto\" : \"bg-green-300 text-black\"\r\n//               }`}\r\n//             >\r\n//               {msg.text}\r\n//             </div>\r\n//           ))}\r\n//           {loading && (\r\n//             <div className=\"animate-pulse text-sm text-green-500\">FarmBot is thinking...</div>\r\n//           )}\r\n//         </div>\r\n\r\n//         <div className=\"flex gap-2 mt-4\">\r\n//           <input\r\n//             value={message}\r\n//             onChange={(e) => setMessage(e.target.value)}\r\n//             type=\"text\"\r\n//             placeholder=\"Ask me about farming tips...\"\r\n//             className=\"flex-1 px-4 py-2 rounded-full border border-green-400 outline-none\"\r\n//             onKeyDown={(e) => e.key === \"Enter\" && generateResponse(message)}\r\n//           />\r\n//           <button\r\n//             onClick={() => generateResponse(message)}\r\n//             className=\"bg-green-600 text-white px-4 py-2 rounded-full hover:bg-green-700\"\r\n//           >\r\n//             Send\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Chatbot;\r\n\r\nimport React, { useState } from \"react\";\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\nimport TypingAnimation from \"./TypingAnimation\"; // Import the TypingAnimation component\r\n\r\nconst Chatbot = ({ theme }) => {\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY);\r\n\r\n  const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\r\n\r\n  const generateResponse = async (msg) => {\r\n    if (!msg.trim()) return;\r\n    setLoading(true);\r\n    setMessages([...messages, { type: \"user\", text: msg }]);\r\n    setMessage(\"\");\r\n\r\n    try {\r\n      const result = await model.generateContent(msg);\r\n      const response = await result.response.text();\r\n      setMessages((prev) => [...prev, { type: \"bot\", text: response }]);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setMessages((prev) => [...prev, { type: \"bot\", text: \"Error generating response.\" }]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`p-4 min-h-screen transition duration-500 ${theme === 'dark' ? 'bg-green-950 text-white' : 'bg-green-100 text-black'}`}>\r\n      <h1 className=\"text-3xl font-bold text-center mb-6\">AgroBot AI ðŸŒ¾</h1>\r\n      <div className=\"max-w-3xl mx-auto bg-white/10 rounded-lg p-4 space-y-4 shadow-lg\">\r\n        <div className=\"space-y-3 overflow-y-auto max-h-[60vh] scrollbar-thin scrollbar-thumb-green-400\">\r\n          {messages.map((msg, i) => (\r\n            <div\r\n              key={i}\r\n              className={`p-3 rounded-xl w-fit ${\r\n                msg.type === \"user\" ? \"bg-green-700 text-white self-end ml-auto\" : \"bg-green-300 text-black\"\r\n              }`}\r\n            >\r\n              {msg.text}\r\n            </div>\r\n          ))}\r\n          {loading && (\r\n            <TypingAnimation /> // Show the typing animation when loading\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"flex gap-2 mt-4\">\r\n          <input\r\n            value={message}\r\n            onChange={(e) => setMessage(e.target.value)}\r\n            type=\"text\"\r\n            placeholder=\"Ask me about farming tips...\"\r\n            className=\"flex-1 px-4 py-2 rounded-full border border-green-400 outline-none relative pl-2 typing-effect\" // Add the typing-effect class here\r\n            onKeyDown={(e) => e.key === \"Enter\" && generateResponse(message)}\r\n          />\r\n          <button\r\n            onClick={() => generateResponse(message)}\r\n            className=\"bg-green-600 text-white px-4 py-2 rounded-full hover:bg-green-700\"\r\n          >\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,kBAAkB,QAAQ,uBAAuB;AAC1D,OAAOC,eAAe,MAAM,mBAAmB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAC7B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMc,KAAK,GAAG,IAAIb,kBAAkB,CAACc,OAAO,CAACC,GAAG,CAACC,wBAAwB,CAAC;EAExE,MAAMC,KAAK,GAAGJ,KAAK,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}